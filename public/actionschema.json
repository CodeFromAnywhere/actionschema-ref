{
  "$schema": "https://spec.actionschema.com/actionschema.json",

  "title": "ActionSchema",
  "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#definitions",

  "$comment": "Love how VSCode allows me to self-refer this schema for validation! Besides adding all plugins, I also made the type of the root of the schema an object only. This was [object,boolean] before. After this I edited properties such as const, default, items, to also include the possibility for a boolean. I think this will make thet type interface easier to edit.",

  "x-grid-items-location": "properties.items.items.properties",

  "type": "object",
  "default": {},
  "properties": {
    "x-grid-items-location": {
      "type": "string",
      "default": "items",
      "description": "Useful at root. Dot-notation of where to find the items."
    },

    "x-is-public": {
      "type": "boolean",
      "default": true,
      "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
    },

    "x-storage": {
      "type": ["string", "null"],
      "description": "Ensures this value will be stored under a key of its dot-location (if null) or of the value referenced in the relative json pointer of this string. The implementation of this spec should ensure the key doesn't conflict with other indexes. A JSON that uses this implementation will contain a $ref object instead of the actual data at this location, which can then be retrieved to build up the full JSON."
    },

    "x-plugin": {
      "x-plugin": {
        "description": "So sick that the plugin can be calculated using a plugin, potentially! Pick the most sensible suggested plugin automatically, or verify it with the human first.",
        "context": {
          "suggestedOperations": "${1/x-suggested-plugins}",
          "autoPick": "${autoPick}"
        }
      },
      "description": "Plug-in an openapi here to say how  this value can be determined.",
      "$ref": "https://spec.actionschema.com/actionschema-plugin.json"
    },

    "x-suggested-plugins": {
      "description": "An array of suggested operations to alter this key",
      "x-plugin": {
        "$operation": "https://search.actionschema.com/openapi.json#/operations/getProviders",
        "arrayReplace": true,
        "context": { "schema": "${}", "dataJsonPointer": "${0/@}" },
        "description": "NOW, THIS IS INTERESTING. WE ARE USING A PLUGIN TO FIND PLUGINS. The function 'suggestPlugins' could be made in a way that it authenticates with your auth, then suggests providers based on your own search preferences and available apis, and it would intelligently use the entire schema and the location of the to-be-suggested plugins within that schema, to have all context it needs.\n\nI can see a potential UI where you have a regular JSON Schema and it would create suggestions for each property."
      },
      "type": "array",
      "items": {
        "$ref": "https://spec.actionschema.com/actionschema-plugin.json"
      }
    },

    "default": {
      "$comment": "Edited",
      "description": "Besides serving as default values for e.g. forms and other things, with ActionSchema `default` also serves as a fallback of `x-plugin`. If x-plugin is empty or it fails, and `default` is available, the default will be set as the value.",
      "anyOf": [
        { "$ref": "#" },
        { "type": "boolean" },
        { "type": "number" },
        { "type": "array" },
        { "type": "string" }
      ]
    },

    "examples": {
      "$comment": "We can potentially later augment this one with an x-plugin that auto-generates examples based on all properties.",

      "description": "Sample JSON values associated with a particular schema, for the purpose of illustrating usage.\n\nBesides serving as example values for e.g. forms and other things, with ActionSchema `examples` also serves as a fallback of `x-plugin` and `default`.",

      "type": "array",
      "items": true
    },

    "deprecated": {
      "$comment": "Same as in the OpenAPI 3.0 spec",
      "type": "boolean",
      "default": false
    },

    "ui:widget": {
      "type": "string",
      "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
    },
    "ui:options": {
      "type": "object",
      "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",

      "properties": {
        "refModelName": {
          "type": "string",
          "description": "If given, it is assumed the value or values of this property link to this model."
        }
      },

      "additionalProperties": true
    },

    "$id": {
      "$comment": "Should be the unique identifier, can be the URL where it can be found",
      "type": "string",
      "format": "uri-reference"
    },

    "$source": {
      "type": "string",
      "format": "uri-reference",
      "$comment": "TODO",
      "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
    },

    "$schema": {
      "$comment": "Edited. Was 'uri' but this doesn't allow referring to files",
      "type": "string",
      "format": "uri-reference"
    },

    "$ref": {
      "type": "string",
      "format": "uri-reference"
    },

    "$comment": {
      "type": "string",
      "description": "Comment for the makers of the schema"
    },

    "title": {
      "type": "string",
      "description": "In the form this shows up as the title for the property. More readable."
    },

    "description": {
      "type": "string",
      "description": "Description for schema at this location"
    },

    "readOnly": {
      "type": "boolean",
      "default": false
    },

    "writeOnly": {
      "type": "boolean",
      "default": false
    },

    "multipleOf": {
      "type": "number",
      "exclusiveMinimum": 0
    },
    "maximum": {
      "type": "number"
    },
    "exclusiveMaximum": {
      "type": "number"
    },
    "minimum": {
      "type": "number"
    },
    "exclusiveMinimum": {
      "$comment": "Edited",
      "oneOf": [{ "type": "number" }, { "type": "boolean" }]
    },
    "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
    "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },

    "pattern": {
      "type": "string",
      "format": "regex"
    },

    "additionalItems": { "$ref": "#" },

    "items": {
      "$comment": "Edited (without breaking original JSONSchema spec) to allow for easier typescript usage.",
      "anyOf": [
        { "$ref": "#" },
        { "$ref": "#/definitions/schemaArray" },
        { "type": "boolean" }
      ],
      "default": true
    },

    "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
    "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
    "uniqueItems": {
      "type": "boolean",
      "default": false
    },

    "contains": { "$ref": "#" },
    "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
    "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
    "required": { "$ref": "#/definitions/stringArray" },

    "additionalProperties": {
      "$comment": "Edited",
      "oneOf": [{ "$ref": "#" }, { "type": "boolean" }]
    },

    "definitions": {
      "type": "object",
      "additionalProperties": { "$ref": "#" },
      "default": {}
    },
    "properties": {
      "type": "object",
      "additionalProperties": { "$ref": "#" },
      "default": {}
    },
    "patternProperties": {
      "type": "object",
      "additionalProperties": { "$ref": "#" },
      "propertyNames": { "format": "regex" },
      "default": {}
    },
    "dependencies": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }]
      }
    },
    "propertyNames": { "$ref": "#" },
    "const": {
      "$comment": "Edited",
      "oneOf": [{ "$ref": "#" }, { "type": "boolean" }]
    },
    "enum": {
      "type": "array",
      "items": true,
      "minItems": 1,
      "uniqueItems": true
    },
    "type": {
      "anyOf": [
        { "$ref": "#/definitions/simpleTypes" },
        {
          "type": "array",
          "items": { "$ref": "#/definitions/simpleTypes" },
          "minItems": 1,
          "uniqueItems": true
        }
      ]
    },
    "format": { "type": "string" },

    "contentMediaType": { "type": "string" },
    "contentEncoding": { "type": "string" },
    "if": { "$ref": "#" },
    "then": { "$ref": "#" },
    "else": { "$ref": "#" },
    "allOf": { "$ref": "#/definitions/schemaArray" },
    "anyOf": { "$ref": "#/definitions/schemaArray" },
    "oneOf": { "$ref": "#/definitions/schemaArray" },
    "not": { "$ref": "#" }
  },
  "definitions": {
    "schemaArray": {
      "type": "array",
      "minItems": 1,
      "items": { "$ref": "#" }
    },

    "nonNegativeInteger": {
      "type": "integer",
      "minimum": 0
    },

    "nonNegativeIntegerDefault0": {
      "allOf": [
        { "$ref": "#/definitions/nonNegativeInteger" },
        { "default": 0 }
      ]
    },

    "simpleTypes": {
      "enum": [
        "array",
        "boolean",
        "integer",
        "null",
        "number",
        "object",
        "string"
      ]
    },

    "stringArray": {
      "type": "array",
      "items": { "type": "string" },
      "uniqueItems": true,
      "default": []
    }
  },
  "additionalProperties": false
}
