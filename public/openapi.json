{
  "$comment": "Taken from https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json. 3.1 uses $dynamicRef which isn't supported yet by the validator. Edited to adhere to the ActionSchema standard. Among other things, I added a lot of stuff to the info object. Once I can use plugins from anywhere (possibly from vscode directly) I will be able to infer lots of things from any openapi.",
  "title": "OpenAPI Document",
  "$source": "https://spec.openapis.org/oas/3.0/schema/2021-09-28",
  "$schema": "https://spec.actionschema.com/actionschema.json",
  "description": "The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3 and extended by ActionSchema.",
  "type": "object",
  "required": ["$schema", "openapi", "x-actionschema", "info", "paths"],
  "properties": {
    "$schema": {
      "$comment": "Added for vscode consistency. Refers to the openapi schema specification (this one)",
      "type": "string",
      "format": "uri-reference"
    },

    "$id": {
      "$comment": "Should be the unique identifier, can be the URL where it can be found",
      "type": "string",
      "format": "uri-reference"
    },

    "$source": {
      "type": "string",
      "format": "uri-reference",
      "$comment": "TODO",
      "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
    },

    "openapi": {
      "description": "Version",
      "type": "string",
      "enum": ["3.1.0"]
    },

    "x-actionschema": {
      "description": "Version of actionschema.",
      "type": "string",
      "pattern": "0.0.1",
      "default": "0.0.1"
    },

    "info": {
      "$comment": "Should determine where information about the usage of this API is located first.",
      "description": "Provides metadata about the API. The metadata MAY be used by tooling as required.",
      "$ref": "#/definitions/Info"
    },

    "externalDocs": {
      "$comment": "Should be documenting just the main capabilities. If not present, can infer this from 'info'",
      "description": "Additional external documentation.",
      "$ref": "https://spec.actionschema.com/openapi-schema.json#/definitions/ExternalDocumentation"
    },

    "servers": {
      "description": "An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /.",
      "type": "array",
      "items": { "$ref": "#/definitions/Server" }
    },

    "x-origin-servers": {
      "description": "An array of Server Objects, indicating the original servers. Useful when defining a proxy.",
      "type": "array",
      "items": { "$ref": "#/definitions/Server" }
    },

    "security": {
      "description": "Security Requirement Object (https://spec.openapis.org/oas/latest.html#security-requirement-object)\n\nLists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.\n\nSecurity Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.\n\nWhen a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.\n\nA declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition. To make security optional, an empty security requirement ({}) can be included in the array.\n\nPlease note: Every item in this array is an object with keys being the scheme names (can be anything). These names should then also be defined in components.securitySchemes.",
      "type": "array",
      "default": [{ "apiKey": [] }],
      "items": {
        "$ref": "#/definitions/SecurityRequirement"
      }
    },

    "tags": {
      "description": "Used for grouping endpoints together. \n\nA list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "uniqueItems": true
    },

    "paths": {
      "description": "The available paths and operations for the API.",
      "$ref": "#/definitions/Paths"
    },

    "components": {
      "description": "An element to hold various schemas for the specification.",
      "$ref": "#/definitions/Components"
    }
  },
  "patternProperties": {
    "^x-": {}
  },
  "additionalProperties": false,
  "definitions": {
    "Reference": {
      "type": "object",
      "required": ["$ref"],
      "patternProperties": {
        "^\\$ref$": {
          "type": "string",
          "format": "uri-reference"
        }
      }
    },
    "Info": {
      "$ref": "https://spec.actionschema.com/openapi-info.json"
    },

    "Server": {
      "type": "object",
      "required": ["url"],
      "properties": {
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServerVariable"
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },
    "ServerVariable": {
      "type": "object",
      "required": ["default"],
      "properties": {
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "default": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },
    "Components": {
      "type": "object",
      "properties": {
        "schemas": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Schema"
                },
                {
                  "$ref": "#/definitions/Reference"
                }
              ]
            }
          }
        },
        "responses": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/Response"
                }
              ]
            }
          }
        },
        "parameters": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/Parameter"
                }
              ]
            }
          }
        },
        "examples": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/Example"
                }
              ]
            }
          }
        },
        "requestBodies": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/RequestBody"
                }
              ]
            }
          }
        },
        "headers": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/Header"
                }
              ]
            }
          }
        },
        "securitySchemes": {
          "$ref": "https://spec.actionschema.com/openapi-security-schemes.json"
        },
        "links": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/Link"
                }
              ]
            }
          }
        },
        "callbacks": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "oneOf": [
                {
                  "$ref": "#/definitions/Reference"
                },
                {
                  "$ref": "#/definitions/Callback"
                }
              ]
            }
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },

    "Response": {
      "type": "object",
      "required": ["description"],
      "properties": {
        "description": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Header"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        },
        "content": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MediaType"
          }
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Link"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },
    "Schema": { "$ref": "https://spec.actionschema.com/openapi-schema.json" },
    "MediaType": {
      "type": "object",
      "properties": {
        "schema": {
          "oneOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "$ref": "#/definitions/Reference"
            }
          ]
        },
        "example": {},
        "examples": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Example"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        },
        "encoding": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Encoding"
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ExampleXORExamples"
        }
      ]
    },
    "Example": {
      "description": "See https://swagger.io/specification/v3/#example-object",
      "type": "object",
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": {},
        "externalValue": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },
    "Header": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean",
          "default": false
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false
        },
        "style": {
          "type": "string",
          "enum": ["simple"],
          "default": "simple"
        },
        "explode": {
          "type": "boolean"
        },
        "allowReserved": {
          "type": "boolean",
          "default": false
        },
        "schema": {
          "oneOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "$ref": "#/definitions/Reference"
            }
          ]
        },
        "content": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MediaType"
          },
          "minProperties": 1,
          "maxProperties": 1
        },
        "example": {},
        "examples": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Example"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ExampleXORExamples"
        },
        {
          "$ref": "#/definitions/SchemaXORContent"
        }
      ]
    },
    "Paths": {
      "type": "object",
      "patternProperties": {
        "^\\/": {
          "$ref": "#/definitions/PathItem"
        },
        "^x-": {}
      },
      "additionalProperties": false
    },
    "PathItem": {
      "type": "object",
      "$comment": "Removed PathItemProperties. Better not to use this, and only allow methods here, as this is badly supported. $ref: #/definitions/PathItemProperties",
      "patternProperties": {
        "^(get|put|post|delete|options|head|patch|trace)$": {
          "$ref": "#/definitions/Operation"
        },
        "^x-": {}
      },
      "additionalProperties": false
    },

    "PathItemProperties": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "description": "It's possible to reference another path here, even from another openapi spec (remote). This creates a realtime copy of the specification. NB: Although this is quite cool, it will only work if everyone implements the $ref spec properly.",
          "type": "string"
        },
        "x-proxy": {
          "type": "object",
          "description": "New proposed way to define proxies. Advantage of this way to define it is that we can also do this in public openapi specs on servers that need both proxied endpoints and normal ones, rather than having a proxy server with a separate datastructure. This allows for better openapi-first design.\n\nWhen using x-proxy, ensure to provide a private file 'security.json' adhering to proxy-security.schema.json",
          "additionalProperties": false,
          "required": ["enabled"],
          "properties": {
            "enabled": { "type": "boolean" },
            "$ref": {
              "type": "string",
              "format": "uri-reference",
              "description": "As an alternative to defining $ref in the parent, you can define your methods yourself. This can be useful in case you want to redefine it as a subset of the original, with different default values, etc. If you need that, you can set this property to define where the original openapi path can be found."
            },
            "methods": {
              "description": "Which methods are proxied. If not given, proxies all methods.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "get",
                  "put",
                  "post",
                  "delete",
                  "options",
                  "head",
                  "patch",
                  "trace"
                ]
              }
            }
          }
        },

        "summary": {
          "type": "string"
        },

        "description": {
          "type": "string"
        },

        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Server"
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Parameter"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          },
          "uniqueItems": true
        }
      }
    },
    "Operation": {
      "type": "object",
      "required": ["responses"],
      "properties": {
        "x-capabilities": {
          "description": "ActionSchema addition: This can be filled with an array of different things of what you can do with the endpoint with more information of what the input should be and what the output should be.",
          "$comment": "This could be later expanded from an array of strings to a more specific array of input/output combos or coded tests, that will tell you, in a way, whether the endpoint works as expected.",
          "type": "array",
          "items": [{ "type": "string" }]
        },
        "x-schema": {
          "description": "ActionSchema addition: You can specify an ActionSchema here that specifies the entire lifecycle of this operation. Defining this will allow the server to infer input and output based on which parameters use plugins and which don't.",
          "type": "object",
          "properties": {
            "schema": {
              "description": "The ActionSchema that defines the steps to be taken and in what order. Can be a reference or the direct schema.",
              "oneOf": [
                {
                  "$ref": "https://spec.actionschema.com/actionschema.json#"
                },
                {
                  "$ref": "#/definitions/Reference"
                }
              ]
            },
            "implementation": {
              "description": "Implemenatation may differ. \n\n- 'status' will respond immediately with the initial result and status.\n - 'wait' will wait for the entire thing to complete or until it has to wait itself. It doesn't need state.\n- 'stream' will respond immediately and stream further results as they come. Also no need for state.",
              "type": "string",
              "enum": ["status", "wait", "stream"]
            }
          }
        },

        "x-unmountOperationId": {
          "type": "string",
          "description": "ActionSchema addition: Should refer to an operationId in the same OpenAPI that would undo the side-effect that calling this function caused.\n\nIf this is given into a path.post object it should mean that this function has an external side-effect when executed, for example it will store some data somewhere.\n\nTo undo this side-effect when changing or removing the plugin, we can specify an unmount plugin that is also part of the same openapi.\n\nThe idea is that if specified, the side effect doesn't leavve any residu"
        },

        "x-code": {
          "type": "object",
          "description": "Object to configure this endpoint to execute specified code. Beware that everything is possible (both remote and local code) but the implementation of where you host your openapi must support it.",
          "properties": {
            "canRunInBrowser": {
              "$comment": "Imagine being able to load the code into the browser and execute it there. This would be how we can define that.",
              "type": "boolean"
            },
            "code-uri": {
              "description": "Must be a uri-reference to a file where the code is found. This can be used in multiple ways. For one we can show the raw code, and secondly, the server implementation can find the file to be executed (or sent to the browser).",
              "type": "string",
              "format": "uri-reference"
            }
          }
        },

        "x-rateLimit": {
          "description": "Operation-based ratelimit info. This overwrites plan-based or global ratelimits.",
          "$ref": "https://spec.actionschema.com/ratelimit.json"
        },

        "x-priceCredit": {
          "description": "Define how much credits need to be blocked for using this endpoint, and deducted afterwards. Can be overwritten in response.",
          "type": "number"
        },

        "tags": {
          "description": "Defining tags here will help group the endpoint for different user interfaces.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },

        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "https://spec.actionschema.com/openapi-schema.json#/definitions/ExternalDocumentation"
        },

        "operationId": {
          "type": "string"
        },

        "parameters": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Parameter"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          },
          "uniqueItems": true
        },
        "requestBody": {
          "oneOf": [
            {
              "$ref": "#/definitions/RequestBody"
            },
            {
              "$ref": "#/definitions/Reference"
            }
          ]
        },
        "responses": {
          "$ref": "#/definitions/Responses"
        },
        "callbacks": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Callback"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "security": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityRequirement"
          }
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Server"
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },
    "Responses": {
      "type": "object",
      "properties": {
        "default": {
          "oneOf": [
            {
              "$ref": "#/definitions/Response"
            },
            {
              "$ref": "#/definitions/Reference"
            }
          ]
        }
      },
      "patternProperties": {
        "^[1-5](?:\\d{2}|XX)$": {
          "oneOf": [
            {
              "$ref": "#/definitions/Response"
            },
            {
              "$ref": "#/definitions/Reference"
            }
          ]
        },
        "^x-": {}
      },
      "minProperties": 1,
      "additionalProperties": false
    },
    "SecurityRequirement": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "https://spec.actionschema.com/openapi-schema.json#/definitions/ExternalDocumentation"
        },
        "x-rateLimit": {
          "description": "Tag-based ratelimit info.",
          "$ref": "https://spec.actionschema.com/ratelimit.json"
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },

    "ExampleXORExamples": {
      "description": "Example and examples are mutually exclusive",
      "not": {
        "required": ["example", "examples"]
      }
    },
    "SchemaXORContent": {
      "description": "Schema and content are mutually exclusive, at least one is required",
      "not": {
        "required": ["schema", "content"]
      },
      "oneOf": [
        {
          "required": ["schema"]
        },
        {
          "required": ["content"],
          "description": "Some properties are not allowed if content is present",
          "allOf": [
            {
              "not": {
                "required": ["style"]
              }
            },
            {
              "not": {
                "required": ["explode"]
              }
            },
            {
              "not": {
                "required": ["allowReserved"]
              }
            },
            {
              "not": {
                "required": ["example"]
              }
            },
            {
              "not": {
                "required": ["examples"]
              }
            }
          ]
        }
      ]
    },
    "Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean",
          "default": false
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false
        },
        "style": {
          "type": "string"
        },
        "explode": {
          "type": "boolean"
        },
        "allowReserved": {
          "type": "boolean",
          "default": false
        },
        "schema": {
          "oneOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "$ref": "#/definitions/Reference"
            }
          ]
        },
        "content": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MediaType"
          },
          "minProperties": 1,
          "maxProperties": 1
        },
        "example": {},
        "examples": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Example"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false,
      "required": ["name", "in"],
      "allOf": [
        {
          "$ref": "#/definitions/ExampleXORExamples"
        },
        {
          "$ref": "#/definitions/SchemaXORContent"
        },
        {
          "$ref": "#/definitions/ParameterLocation"
        }
      ]
    },
    "ParameterLocation": {
      "description": "Parameter location",
      "oneOf": [
        {
          "description": "Parameter in path",
          "required": ["required"],
          "properties": {
            "in": {
              "enum": ["path"]
            },
            "style": {
              "enum": ["matrix", "label", "simple"],
              "default": "simple"
            },
            "required": {
              "enum": [true]
            }
          }
        },
        {
          "description": "Parameter in query",
          "properties": {
            "in": {
              "enum": ["query"]
            },
            "style": {
              "enum": ["form", "spaceDelimited", "pipeDelimited", "deepObject"],
              "default": "form"
            }
          }
        },
        {
          "description": "Parameter in header",
          "properties": {
            "in": {
              "enum": ["header"]
            },
            "style": {
              "enum": ["simple"],
              "default": "simple"
            }
          }
        },
        {
          "description": "Parameter in cookie",
          "properties": {
            "in": {
              "enum": ["cookie"]
            },
            "style": {
              "enum": ["form"],
              "default": "form"
            }
          }
        }
      ]
    },
    "RequestBody": {
      "type": "object",
      "required": ["content"],
      "properties": {
        "description": {
          "type": "string"
        },
        "content": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MediaType"
          }
        },
        "required": {
          "type": "boolean",
          "default": false
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },

    "Link": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string"
        },
        "operationRef": {
          "type": "string",
          "format": "uri-reference"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {}
        },
        "requestBody": {},
        "description": {
          "type": "string"
        },
        "server": {
          "$ref": "#/definitions/Server"
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false,
      "not": {
        "description": "Operation Id and Operation Ref are mutually exclusive",
        "required": ["operationId", "operationRef"]
      }
    },
    "Callback": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PathItem"
      },
      "patternProperties": {
        "^x-": {}
      }
    },
    "Encoding": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/Header"
              },
              {
                "$ref": "#/definitions/Reference"
              }
            ]
          }
        },
        "style": {
          "type": "string",
          "enum": ["form", "spaceDelimited", "pipeDelimited", "deepObject"]
        },
        "explode": {
          "type": "boolean"
        },
        "allowReserved": {
          "type": "boolean",
          "default": false
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    }
  }
}
